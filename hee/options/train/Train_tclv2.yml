# CUDA_VISIBLE_DEVICES=3 python train.py -opt options/train/Train_tclv2.yml

# general settings
name: Train_tclv2.yml
model_type: MultiFrameVDModel
num_gpu: auto  # set num_gpu: 0 for cpu mode
find_unused_parameters: True
manual_seed: 0
train_seed: 42

# dataset and data loader settings
datasets:
  train:
    name: MultiFrameVD
    type: MultiFrameVDPairedImageDataset
    dataroot_gt: ../datasets/optical/tcl/train/target
    dataroot_lq: ../datasets/optical/tcl/train/source
    io_backend:
      type: disk

    gt_size: 256
    use_hflip: true
    use_rot: false

    # data loader
    use_shuffle: false
    num_worker_per_gpu: 1
    batch_size_per_gpu: 1
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: MultiFrameVD
    type: MultiFrameVDPairedImageDataset
    dataroot_gt: ../datasets/optical/tcl/test/target
    dataroot_lq: ../datasets/optical/tcl/test/source
    io_backend:
      type: disk
    batch_size: 1
    num_worker: 1

# network structures
network_d:
  type: DemoireNet

network_t:
  type: TemporalNet

# path
path:
  pretrain_network_d: ~ #experiments/Train_ipv2.yml/models/net_100000.pth
  strict_load_d: true
  param_key_d: 'params_ema_d'

  pretrain_network_t: ~
  strict_load_t: true
  param_key_t: 'params_ema_t'

# training settings
train:
  ema_decay: 0.999
  optim_d:
    type: AdamW
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.999]

  scheduler:
    type: CosineAnnealingRestartLR
    periods: [100000, 100000, 100000, 100000, 100000, 100000]
    restart_weights: [1, 1, 1, 1, 1, 1]
    eta_min: !!float 1e-7

  total_iter: 100000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

  # perceptual loss (content and style losses)
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      'conv3_3': 0.5
    vgg_type: vgg16
    use_input_norm: true
    perceptual_weight: 1.0
    style_weight: 0
    range_norm: false
    criterion: l1

# validation settings
val:
  val_freq: !!float 10000
  save_img: false

  metrics:
    psnr:
      type: calculate_psnr_pt
      crop_border: 0
    ssim:
      type: calculate_ssim_pt
      crop_border: 0

# logging settings
logger:
  print_freq: 10000
  save_checkpoint_freq: !!float 10000
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500